{
    "buildhost_description": {
        "id": "lab002c03",
        "os": "Linux 2.6.32-754.2.1.el6.x86_64 x86_64\n\"CentOS release 6.10 (Final)\"\n",
        "compiler_version": "g++ (GCC) 6.2.0",
        "debugger_version": "GNU gdb (GDB) 7.12",
        "profiler_version": "valgrind-3.12.0"
    },
    "status": 4,
    "compile_result": {
        "status": 1,
        "output": ""
    },
    "run_result": [],
    "debug_result": [],
    "profile_result": [],
    "test_results": {
        "3732": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "\/tmp\/buildservice\/bs_5633\/core.26984"
            },
            "debug_result": {
                "output": "[New LWP 26984]\nCore was generated by `bs_test_3732'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\nTo enable execution of this file add\n\tadd-auto-load-safe-path \/opt\/gcc-6.2.0\/lib64\/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME\/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path \/\nline to your configuration file \"$HOME\/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\n#1  0x0000000000401cb3 in Liga::RegistrirajUtakmicu (this=0x7ffde813c0e0, tim1=0x406a48 \"NK Zeljeznicar\", tim2=0x406a57 \"HSK Zrinjski\", rezultat1=2, rezultat2=0) at bs_test_3732.cpp:116\n#2  0x0000000000402371 in main () at bs_test_3732.cpp:174",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "profile_result": {
                "output": "==27014== Memcheck, a memory error detector\n==27014== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==27014== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==27014== Command: bs_test_3732\n==27014== Parent PID: 27012\n==27014== \n==27014== Invalid read of size 1\n==27014==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27014==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3732.cpp:116)\n==27014==    by 0x402370: main (bs_test_3732.cpp:174)\n==27014==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==27014== \n==27014== \n==27014== Process terminating with default action of signal 11 (SIGSEGV)\n==27014==  Access not within mapped region at address 0x0\n==27014==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27014==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3732.cpp:116)\n==27014==    by 0x402370: main (bs_test_3732.cpp:174)\n==27014==  If you believe this happened as a result of a stack\n==27014==  overflow in your program's main thread (unlikely but\n==27014==  possible), you can try to increase the size of the\n==27014==  main thread stack using the --main-stacksize= flag.\n==27014==  The main thread stack size used in this run was 10485760.\n==27014== \n==27014== HEAP SUMMARY:\n==27014==     in use at exit: 624 bytes in 7 blocks\n==27014==   total heap usage: 9 allocs, 2 frees, 73,424 bytes allocated\n==27014== \n==27014== LEAK SUMMARY:\n==27014==    definitely lost: 0 bytes in 0 blocks\n==27014==    indirectly lost: 0 bytes in 0 blocks\n==27014==      possibly lost: 0 bytes in 0 blocks\n==27014==    still reachable: 624 bytes in 7 blocks\n==27014==         suppressed: 0 bytes in 0 blocks\n==27014== Reachable blocks (those to which a pointer was found) are not shown.\n==27014== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==27014== \n==27014== For counts of detected and suppressed errors, rerun with: -v\n==27014== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 1\n    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3732.cpp:116)\n    by 0x402370: main (bs_test_3732.cpp:174)\n  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3733": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "\/tmp\/buildservice\/bs_5633\/core.27050"
            },
            "debug_result": {
                "output": "[New LWP 27050]\nCore was generated by `bs_test_3733'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\nTo enable execution of this file add\n\tadd-auto-load-safe-path \/opt\/gcc-6.2.0\/lib64\/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME\/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path \/\nline to your configuration file \"$HOME\/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\n#1  0x0000000000401cb3 in Liga::RegistrirajUtakmicu (this=0x7fff92d626d0, tim1=0x406a48 \"NK Zeljeznicar\", tim2=0x406a57 \"HSK Zrinjski\", rezultat1=2, rezultat2=0) at bs_test_3733.cpp:116\n#2  0x0000000000402371 in main () at bs_test_3733.cpp:174",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "profile_result": {
                "output": "==27079== Memcheck, a memory error detector\n==27079== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==27079== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==27079== Command: bs_test_3733\n==27079== Parent PID: 27078\n==27079== \n==27079== Invalid read of size 1\n==27079==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27079==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3733.cpp:116)\n==27079==    by 0x402370: main (bs_test_3733.cpp:174)\n==27079==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==27079== \n==27079== \n==27079== Process terminating with default action of signal 11 (SIGSEGV)\n==27079==  Access not within mapped region at address 0x0\n==27079==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27079==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3733.cpp:116)\n==27079==    by 0x402370: main (bs_test_3733.cpp:174)\n==27079==  If you believe this happened as a result of a stack\n==27079==  overflow in your program's main thread (unlikely but\n==27079==  possible), you can try to increase the size of the\n==27079==  main thread stack using the --main-stacksize= flag.\n==27079==  The main thread stack size used in this run was 10485760.\n==27079== \n==27079== HEAP SUMMARY:\n==27079==     in use at exit: 624 bytes in 7 blocks\n==27079==   total heap usage: 9 allocs, 2 frees, 73,424 bytes allocated\n==27079== \n==27079== LEAK SUMMARY:\n==27079==    definitely lost: 0 bytes in 0 blocks\n==27079==    indirectly lost: 0 bytes in 0 blocks\n==27079==      possibly lost: 0 bytes in 0 blocks\n==27079==    still reachable: 624 bytes in 7 blocks\n==27079==         suppressed: 0 bytes in 0 blocks\n==27079== Reachable blocks (those to which a pointer was found) are not shown.\n==27079== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==27079== \n==27079== For counts of detected and suppressed errors, rerun with: -v\n==27079== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 1\n    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3733.cpp:116)\n    by 0x402370: main (bs_test_3733.cpp:174)\n  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3734": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "\/tmp\/buildservice\/bs_5633\/core.27100"
            },
            "debug_result": {
                "output": "[New LWP 27100]\nCore was generated by `bs_test_3734'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\nTo enable execution of this file add\n\tadd-auto-load-safe-path \/opt\/gcc-6.2.0\/lib64\/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME\/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path \/\nline to your configuration file \"$HOME\/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\n#1  0x0000000000401cb3 in Liga::RegistrirajUtakmicu (this=0x7ffffa9ec980, tim1=0x406b30 \"FK Sloboda\", tim2=0x406b17 \"HSK Zrinjski\", rezultat1=1, rezultat2=1) at bs_test_3734.cpp:116\n#2  0x0000000000402435 in main () at bs_test_3734.cpp:176",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "profile_result": {
                "output": "==27129== Memcheck, a memory error detector\n==27129== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==27129== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==27129== Command: bs_test_3734\n==27129== Parent PID: 27128\n==27129== \n==27129== Invalid read of size 1\n==27129==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27129==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3734.cpp:116)\n==27129==    by 0x402434: main (bs_test_3734.cpp:176)\n==27129==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==27129== \n==27129== \n==27129== Process terminating with default action of signal 11 (SIGSEGV)\n==27129==  Access not within mapped region at address 0x0\n==27129==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27129==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3734.cpp:116)\n==27129==    by 0x402434: main (bs_test_3734.cpp:176)\n==27129==  If you believe this happened as a result of a stack\n==27129==  overflow in your program's main thread (unlikely but\n==27129==  possible), you can try to increase the size of the\n==27129==  main thread stack using the --main-stacksize= flag.\n==27129==  The main thread stack size used in this run was 10485760.\n==27129== \n==27129== HEAP SUMMARY:\n==27129==     in use at exit: 1,248 bytes in 14 blocks\n==27129==   total heap usage: 17 allocs, 3 frees, 74,144 bytes allocated\n==27129== \n==27129== LEAK SUMMARY:\n==27129==    definitely lost: 0 bytes in 0 blocks\n==27129==    indirectly lost: 0 bytes in 0 blocks\n==27129==      possibly lost: 0 bytes in 0 blocks\n==27129==    still reachable: 1,248 bytes in 14 blocks\n==27129==         suppressed: 0 bytes in 0 blocks\n==27129== Reachable blocks (those to which a pointer was found) are not shown.\n==27129== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==27129== \n==27129== For counts of detected and suppressed errors, rerun with: -v\n==27129== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 1\n    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3734.cpp:116)\n    by 0x402434: main (bs_test_3734.cpp:176)\n  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3735": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "\/tmp\/buildservice\/bs_5633\/core.27164"
            },
            "debug_result": {
                "output": "[New LWP 27164]\nCore was generated by `bs_test_3735'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\nTo enable execution of this file add\n\tadd-auto-load-safe-path \/opt\/gcc-6.2.0\/lib64\/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME\/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path \/\nline to your configuration file \"$HOME\/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\n#1  0x0000000000401cb3 in Liga::RegistrirajUtakmicu (this=0x7ffdcb9ec4b0, tim1=0x406af0 \"FK Sloboda\", tim2=0x406ad7 \"HSK Zrinjski\", rezultat1=1, rezultat2=1) at bs_test_3735.cpp:116\n#2  0x0000000000402401 in main () at bs_test_3735.cpp:176",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "profile_result": {
                "output": "==27194== Memcheck, a memory error detector\n==27194== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==27194== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==27194== Command: bs_test_3735\n==27194== Parent PID: 27193\n==27194== \n==27194== Invalid read of size 1\n==27194==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27194==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3735.cpp:116)\n==27194==    by 0x402400: main (bs_test_3735.cpp:176)\n==27194==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==27194== \n==27194== \n==27194== Process terminating with default action of signal 11 (SIGSEGV)\n==27194==  Access not within mapped region at address 0x0\n==27194==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27194==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3735.cpp:116)\n==27194==    by 0x402400: main (bs_test_3735.cpp:176)\n==27194==  If you believe this happened as a result of a stack\n==27194==  overflow in your program's main thread (unlikely but\n==27194==  possible), you can try to increase the size of the\n==27194==  main thread stack using the --main-stacksize= flag.\n==27194==  The main thread stack size used in this run was 10485760.\n==27194== \n==27194== HEAP SUMMARY:\n==27194==     in use at exit: 1,040 bytes in 12 blocks\n==27194==   total heap usage: 15 allocs, 3 frees, 73,904 bytes allocated\n==27194== \n==27194== LEAK SUMMARY:\n==27194==    definitely lost: 0 bytes in 0 blocks\n==27194==    indirectly lost: 0 bytes in 0 blocks\n==27194==      possibly lost: 0 bytes in 0 blocks\n==27194==    still reachable: 1,040 bytes in 12 blocks\n==27194==         suppressed: 0 bytes in 0 blocks\n==27194== Reachable blocks (those to which a pointer was found) are not shown.\n==27194== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==27194== \n==27194== For counts of detected and suppressed errors, rerun with: -v\n==27194== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 1\n    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3735.cpp:116)\n    by 0x402400: main (bs_test_3735.cpp:176)\n  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3736": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "\/tmp\/buildservice\/bs_5633\/core.27247"
            },
            "debug_result": {
                "output": "[New LWP 27247]\nCore was generated by `bs_test_3736'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\nTo enable execution of this file add\n\tadd-auto-load-safe-path \/opt\/gcc-6.2.0\/lib64\/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME\/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path \/\nline to your configuration file \"$HOME\/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\n#1  0x0000000000401cb3 in Liga::RegistrirajUtakmicu (this=0x7ffe7aec99e0, tim1=0x406ad0 \"FK Sloboda\", tim2=0x406ab7 \"HSK Zrinjski\", rezultat1=1, rezultat2=1) at bs_test_3736.cpp:116\n#2  0x0000000000402401 in main () at bs_test_3736.cpp:176",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "profile_result": {
                "output": "==27277== Memcheck, a memory error detector\n==27277== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==27277== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==27277== Command: bs_test_3736\n==27277== Parent PID: 27275\n==27277== \n==27277== Invalid read of size 1\n==27277==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27277==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3736.cpp:116)\n==27277==    by 0x402400: main (bs_test_3736.cpp:176)\n==27277==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==27277== \n==27277== \n==27277== Process terminating with default action of signal 11 (SIGSEGV)\n==27277==  Access not within mapped region at address 0x0\n==27277==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27277==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3736.cpp:116)\n==27277==    by 0x402400: main (bs_test_3736.cpp:176)\n==27277==  If you believe this happened as a result of a stack\n==27277==  overflow in your program's main thread (unlikely but\n==27277==  possible), you can try to increase the size of the\n==27277==  main thread stack using the --main-stacksize= flag.\n==27277==  The main thread stack size used in this run was 10485760.\n==27277== \n==27277== HEAP SUMMARY:\n==27277==     in use at exit: 1,040 bytes in 12 blocks\n==27277==   total heap usage: 15 allocs, 3 frees, 73,904 bytes allocated\n==27277== \n==27277== LEAK SUMMARY:\n==27277==    definitely lost: 0 bytes in 0 blocks\n==27277==    indirectly lost: 0 bytes in 0 blocks\n==27277==      possibly lost: 0 bytes in 0 blocks\n==27277==    still reachable: 1,040 bytes in 12 blocks\n==27277==         suppressed: 0 bytes in 0 blocks\n==27277== Reachable blocks (those to which a pointer was found) are not shown.\n==27277== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==27277== \n==27277== For counts of detected and suppressed errors, rerun with: -v\n==27277== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 1\n    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3736.cpp:116)\n    by 0x402400: main (bs_test_3736.cpp:176)\n  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3748": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 1,
                "status": 3,
                "core": "\/tmp\/buildservice\/bs_5633\/core.27300"
            },
            "debug_result": {
                "output": "[New LWP 27300]\nCore was generated by `bs_test_3748'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x000000000040633c in __gnu_cxx::new_allocator<Tim>::construct<Tim, Tim&> (this=0x7ffcad3abb37, __p=0xf8a020, __args#0=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/ext\/new_allocator.h:120\n120\t\t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\nTo enable execution of this file add\n\tadd-auto-load-safe-path \/opt\/gcc-6.2.0\/lib64\/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME\/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path \/\nline to your configuration file \"$HOME\/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x000000000040633c in __gnu_cxx::new_allocator<Tim>::construct<Tim, Tim&> (this=0x7ffcad3abb37, __p=0xf8a020, __args#0=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/ext\/new_allocator.h:120\n#1  0x0000000000405f0e in std::allocator_traits<std::allocator<Tim> >::construct<Tim, Tim&> (__a=..., __p=0xf8a020, __args#0=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/bits\/alloc_traits.h:455\n#2  0x000000000040575f in std::_Sp_counted_ptr_inplace<Tim, std::allocator<Tim>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<Tim&> (this=0xf8a010, __a=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/bits\/shared_ptr_base.h:520\n#3  0x0000000000404bfe in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<Tim, std::allocator<Tim>, Tim&> (this=0x7ffcad3abce8, __a=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/bits\/shared_ptr_base.h:615\n#4  0x00000000004043dc in std::__shared_ptr<Tim, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<Tim>, Tim&> (this=0x7ffcad3abce0, __tag=..., __a=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/bits\/shared_ptr_base.h:1100\n#5  0x0000000000403b2c in std::shared_ptr<Tim>::shared_ptr<std::allocator<Tim>, Tim&> (this=0x7ffcad3abce0, __tag=..., __a=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/bits\/shared_ptr.h:319\n#6  0x00000000004033df in std::allocate_shared<Tim, std::allocator<Tim>, Tim&> (__a=..., __args#0=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/bits\/shared_ptr.h:620\n#7  0x0000000000402c28 in std::make_shared<Tim, Tim&> (__args#0=...) at \/opt\/gcc-6.2.0\/include\/c++\/6.2.0\/bits\/shared_ptr.h:636\n#8  0x0000000000401749 in Liga::Liga (this=0x7ffcad3abd40, l=...) at bs_test_3748.cpp:74\n#9  0x0000000000402366 in main () at bs_test_3748.cpp:174",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 68
                    }
                ]
            },
            "profile_result": {
                "output": "==27330== Memcheck, a memory error detector\n==27330== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==27330== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==27330== Command: bs_test_3748\n==27330== Parent PID: 27329\n==27330== \n==27330== Invalid read of size 8\n==27330==    at 0x40633C: void __gnu_cxx::new_allocator<Tim>::construct<Tim, Tim&>(Tim*, Tim&) (new_allocator.h:120)\n==27330==    by 0x405F0D: void std::allocator_traits<std::allocator<Tim> >::construct<Tim, Tim&>(std::allocator<Tim>&, Tim*, Tim&) (alloc_traits.h:455)\n==27330==    by 0x40575E: std::_Sp_counted_ptr_inplace<Tim, std::allocator<Tim>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<Tim&>(std::allocator<Tim>, Tim&) (shared_ptr_base.h:520)\n==27330==    by 0x404BFD: std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<Tim, std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, Tim*, std::allocator<Tim> const&, Tim&) (shared_ptr_base.h:615)\n==27330==    by 0x4043DB: std::__shared_ptr<Tim, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, std::allocator<Tim> const&, Tim&) (shared_ptr_base.h:1100)\n==27330==    by 0x403B2B: std::shared_ptr<Tim>::shared_ptr<std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, std::allocator<Tim> const&, Tim&) (shared_ptr.h:319)\n==27330==    by 0x4033DE: std::shared_ptr<Tim> std::allocate_shared<Tim, std::allocator<Tim>, Tim&>(std::allocator<Tim> const&, Tim&) (shared_ptr.h:620)\n==27330==    by 0x402C27: std::shared_ptr<Tim> std::make_shared<Tim, Tim&>(Tim&) (shared_ptr.h:636)\n==27330==    by 0x401748: Liga::Liga(Liga const&) (bs_test_3748.cpp:74)\n==27330==    by 0x402365: main (bs_test_3748.cpp:174)\n==27330==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==27330== \n==27330== \n==27330== Process terminating with default action of signal 11 (SIGSEGV)\n==27330==  Access not within mapped region at address 0x0\n==27330==    at 0x40633C: void __gnu_cxx::new_allocator<Tim>::construct<Tim, Tim&>(Tim*, Tim&) (new_allocator.h:120)\n==27330==    by 0x405F0D: void std::allocator_traits<std::allocator<Tim> >::construct<Tim, Tim&>(std::allocator<Tim>&, Tim*, Tim&) (alloc_traits.h:455)\n==27330==    by 0x40575E: std::_Sp_counted_ptr_inplace<Tim, std::allocator<Tim>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<Tim&>(std::allocator<Tim>, Tim&) (shared_ptr_base.h:520)\n==27330==    by 0x404BFD: std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<Tim, std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, Tim*, std::allocator<Tim> const&, Tim&) (shared_ptr_base.h:615)\n==27330==    by 0x4043DB: std::__shared_ptr<Tim, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, std::allocator<Tim> const&, Tim&) (shared_ptr_base.h:1100)\n==27330==    by 0x403B2B: std::shared_ptr<Tim>::shared_ptr<std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, std::allocator<Tim> const&, Tim&) (shared_ptr.h:319)\n==27330==    by 0x4033DE: std::shared_ptr<Tim> std::allocate_shared<Tim, std::allocator<Tim>, Tim&>(std::allocator<Tim> const&, Tim&) (shared_ptr.h:620)\n==27330==    by 0x402C27: std::shared_ptr<Tim> std::make_shared<Tim, Tim&>(Tim&) (shared_ptr.h:636)\n==27330==    by 0x401748: Liga::Liga(Liga const&) (bs_test_3748.cpp:74)\n==27330==    by 0x402365: main (bs_test_3748.cpp:174)\n==27330==  If you believe this happened as a result of a stack\n==27330==  overflow in your program's main thread (unlikely but\n==27330==  possible), you can try to increase the size of the\n==27330==  main thread stack using the --main-stacksize= flag.\n==27330==  The main thread stack size used in this run was 10485760.\n==27330== \n==27330== HEAP SUMMARY:\n==27330==     in use at exit: 888 bytes in 9 blocks\n==27330==   total heap usage: 11 allocs, 2 frees, 73,688 bytes allocated\n==27330== \n==27330== LEAK SUMMARY:\n==27330==    definitely lost: 0 bytes in 0 blocks\n==27330==    indirectly lost: 0 bytes in 0 blocks\n==27330==      possibly lost: 0 bytes in 0 blocks\n==27330==    still reachable: 888 bytes in 9 blocks\n==27330==         suppressed: 0 bytes in 0 blocks\n==27330== Reachable blocks (those to which a pointer was found) are not shown.\n==27330== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==27330== \n==27330== For counts of detected and suppressed errors, rerun with: -v\n==27330== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x40633C: void __gnu_cxx::new_allocator<Tim>::construct<Tim, Tim&>(Tim*, Tim&) (new_allocator.h:120)\n    by 0x405F0D: void std::allocator_traits<std::allocator<Tim> >::construct<Tim, Tim&>(std::allocator<Tim>&, Tim*, Tim&) (alloc_traits.h:455)\n    by 0x40575E: std::_Sp_counted_ptr_inplace<Tim, std::allocator<Tim>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<Tim&>(std::allocator<Tim>, Tim&) (shared_ptr_base.h:520)\n    by 0x404BFD: std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<Tim, std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, Tim*, std::allocator<Tim> const&, Tim&) (shared_ptr_base.h:615)\n    by 0x4043DB: std::__shared_ptr<Tim, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, std::allocator<Tim> const&, Tim&) (shared_ptr_base.h:1100)\n    by 0x403B2B: std::shared_ptr<Tim>::shared_ptr<std::allocator<Tim>, Tim&>(std::_Sp_make_shared_tag, std::allocator<Tim> const&, Tim&) (shared_ptr.h:319)\n    by 0x4033DE: std::shared_ptr<Tim> std::allocate_shared<Tim, std::allocator<Tim>, Tim&>(std::allocator<Tim> const&, Tim&) (shared_ptr.h:620)\n    by 0x402C27: std::shared_ptr<Tim> std::make_shared<Tim, Tim&>(Tim&) (shared_ptr.h:636)\n    by 0x401748: Liga::Liga(Liga const&) (bs_test_3748.cpp:74)\n    by 0x402365: main (bs_test_3748.cpp:174)\n  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 68
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3749": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 1,
                "status": 3,
                "core": "\/tmp\/buildservice\/bs_5633\/core.27361"
            },
            "debug_result": {
                "output": "[New LWP 27361]\nCore was generated by `bs_test_3749'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\nTo enable execution of this file add\n\tadd-auto-load-safe-path \/opt\/gcc-6.2.0\/lib64\/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME\/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path \/\nline to your configuration file \"$HOME\/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x0000003715537a1a in __strcmp_ssse3 () from \/lib64\/libc.so.6\n#1  0x0000000000401cb3 in Liga::RegistrirajUtakmicu (this=0x7fffcf750160, tim1=0x406bd0 \"FK Sloboda\", tim2=0x406bb7 \"HSK Zrinjski\", rezultat1=1, rezultat2=1) at bs_test_3749.cpp:116\n#2  0x000000000040238e in main () at bs_test_3749.cpp:174",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "profile_result": {
                "output": "==27392== Memcheck, a memory error detector\n==27392== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==27392== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==27392== Command: bs_test_3749\n==27392== Parent PID: 27390\n==27392== \n==27392== Invalid read of size 1\n==27392==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27392==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3749.cpp:116)\n==27392==    by 0x40238D: main (bs_test_3749.cpp:174)\n==27392==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==27392== \n==27392== \n==27392== Process terminating with default action of signal 11 (SIGSEGV)\n==27392==  Access not within mapped region at address 0x0\n==27392==    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n==27392==    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3749.cpp:116)\n==27392==    by 0x40238D: main (bs_test_3749.cpp:174)\n==27392==  If you believe this happened as a result of a stack\n==27392==  overflow in your program's main thread (unlikely but\n==27392==  possible), you can try to increase the size of the\n==27392==  main thread stack using the --main-stacksize= flag.\n==27392==  The main thread stack size used in this run was 10485760.\n==27392== \n==27392== HEAP SUMMARY:\n==27392==     in use at exit: 624 bytes in 7 blocks\n==27392==   total heap usage: 9 allocs, 2 frees, 73,424 bytes allocated\n==27392== \n==27392== LEAK SUMMARY:\n==27392==    definitely lost: 0 bytes in 0 blocks\n==27392==    indirectly lost: 0 bytes in 0 blocks\n==27392==      possibly lost: 0 bytes in 0 blocks\n==27392==    still reachable: 624 bytes in 7 blocks\n==27392==         suppressed: 0 bytes in 0 blocks\n==27392== Reachable blocks (those to which a pointer was found) are not shown.\n==27392== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==27392== \n==27392== For counts of detected and suppressed errors, rerun with: -v\n==27392== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 1\n    at 0x4A09C83: __strcmp_sse42 (vg_replace_strmem.c:845)\n    by 0x401CB2: Liga::RegistrirajUtakmicu(char const*, char const*, int, int) (bs_test_3749.cpp:116)\n    by 0x40238D: main (bs_test_3749.cpp:174)\n  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 110
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        }
    },
    "queue_items": 0,
    "time": 1561007543
}