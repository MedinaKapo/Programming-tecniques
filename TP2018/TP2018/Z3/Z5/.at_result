{
    "buildhost_description": {
        "id": "lab002c27",
        "os": "Linux 2.6.32-754.2.1.el6.x86_64 x86_64\n\"CentOS release 6.10 (Final)\"\n",
        "compiler_version": "g++ (GCC) 6.2.0",
        "debugger_version": "GNU gdb (GDB) 7.12",
        "profiler_version": "valgrind-3.12.0"
    },
    "status": 4,
    "compile_result": {
        "status": 1,
        "output": "main.cpp: In function ‘std::vector<std::set<std::__cxx11::basic_string<char> > > Razvrstavanje(std::vector<std::__cxx11::basic_string<char> >, int)’:\nmain.cpp:35:9: warning: unused variable ‘kontrola’ [-Wunused-variable]\n     int kontrola=1;\n         ^~~~~~~~\nmain.cpp:37:9: warning: variable ‘veliki’ set but not used [-Wunused-but-set-variable]\n     int veliki,polovnicnih;\n         ^~~~~~\nmain.cpp:37:16: warning: variable ‘polovnicnih’ set but not used [-Wunused-but-set-variable]\n     int veliki,polovnicnih;\n                ^~~~~~~~~~~\nmain.cpp:47:9: warning: unused variable ‘brojac’ [-Wunused-variable]\n     int brojac=0;\n         ^~~~~~\nmain.cpp:59:9: warning: unused variable ‘duzina’ [-Wunused-variable]\n     int duzina=duzina_stringa(pocetak->ime);\n         ^~~~~~\nmain.cpp:60:10: warning: unused variable ‘uslov’ [-Wunused-variable]\n     bool uslov=false;\n          ^~~~~\nmain.cpp:61:9: warning: unused variable ‘interni’ [-Wunused-variable]\n     int interni=0;\n         ^~~~~~~",
        "parsed_output": [
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "35",
                "col": "9",
                "message": "unused variable 'kontrola'",
                "output": "/tmp/buildservice/bs_8735/main.cpp:35:9: warning: unused variable ‘kontrola’ [-Wunused-variable]     int kontrola=1;         ^~~~~~~~",
                "code": "int kontrola=1;"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "37",
                "col": "9",
                "message": "variable 'veliki' set but not used",
                "output": "/tmp/buildservice/bs_8735/main.cpp:37:9: warning: variable ‘veliki’ set but not used [-Wunused-but-set-variable]     int veliki,polovnicnih;         ^~~~~~",
                "code": "int veliki,polovnicnih;"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "37",
                "col": "16",
                "message": "variable 'polovnicnih' set but not used",
                "output": "/tmp/buildservice/bs_8735/main.cpp:37:16: warning: variable ‘polovnicnih’ set but not used [-Wunused-but-set-variable]     int veliki,polovnicnih;                ^~~~~~~~~~~",
                "code": "int veliki,polovnicnih;"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "47",
                "col": "9",
                "message": "unused variable 'brojac'",
                "output": "/tmp/buildservice/bs_8735/main.cpp:47:9: warning: unused variable ‘brojac’ [-Wunused-variable]     int brojac=0;         ^~~~~~",
                "code": "int brojac=0;"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "59",
                "col": "9",
                "message": "unused variable 'duzina'",
                "output": "/tmp/buildservice/bs_8735/main.cpp:59:9: warning: unused variable ‘duzina’ [-Wunused-variable]     int duzina=duzina_stringa(pocetak->ime);         ^~~~~~",
                "code": "int duzina=duzina_stringa(pocetak->ime);"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "60",
                "col": "10",
                "message": "unused variable 'uslov'",
                "output": "/tmp/buildservice/bs_8735/main.cpp:60:10: warning: unused variable ‘uslov’ [-Wunused-variable]     bool uslov=false;          ^~~~~",
                "code": "bool uslov=false;"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "61",
                "col": "9",
                "message": "unused variable 'interni'",
                "output": "/tmp/buildservice/bs_8735/main.cpp:61:9: warning: unused variable ‘interni’ [-Wunused-variable]     int interni=0;         ^~~~~~~",
                "code": "int interni=0;"
            }
        ]
    },
    "run_result": [],
    "debug_result": [],
    "profile_result": [],
    "test_results": {
        "3598": {
            "status": 5,
            "run_result": {
                "output": "Unesite broj djece: Unesite imena djece: \nUnesite broj timova: ",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_8735/core.26587"
            },
            "debug_result": {
                "output": "[New LWP 26587]\nCore was generated by `bs_test_3598'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\nTo enable execution of this file add\n\tadd-auto-load-safe-path /opt/gcc-6.2.0/lib64/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path /\nline to your configuration file \"$HOME/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\n#1  0x0000000000401de1 in Razvrstavanje (imena=..., broj_timova=3) at bs_test_3598.cpp:73\n#2  0x0000000000401fc8 in _main () at bs_test_3598.cpp:141\n#3  0x00000000004022bb in main () at bs_test_3598.cpp:165",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "profile_result": {
                "output": "==26599== Memcheck, a memory error detector\n==26599== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26599== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==26599== Command: bs_test_3598\n==26599== Parent PID: 26598\n==26599== \n==26599== Invalid read of size 8\n==26599==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26599==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3598.cpp:73)\n==26599==    by 0x401FC7: _main() (bs_test_3598.cpp:141)\n==26599==    by 0x4022BA: main (bs_test_3598.cpp:165)\n==26599==  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n==26599== \n==26599== \n==26599== Process terminating with default action of signal 11 (SIGSEGV)\n==26599==  Access not within mapped region at address 0x8\n==26599==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26599==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3598.cpp:73)\n==26599==    by 0x401FC7: _main() (bs_test_3598.cpp:141)\n==26599==    by 0x4022BA: main (bs_test_3598.cpp:165)\n==26599==  If you believe this happened as a result of a stack\n==26599==  overflow in your program's main thread (unlikely but\n==26599==  possible), you can try to increase the size of the\n==26599==  main thread stack using the --main-stacksize= flag.\n==26599==  The main thread stack size used in this run was 10485760.\n==26599== \n==26599== HEAP SUMMARY:\n==26599==     in use at exit: 1,296 bytes in 13 blocks\n==26599==   total heap usage: 18 allocs, 5 frees, 74,480 bytes allocated\n==26599== \n==26599== LEAK SUMMARY:\n==26599==    definitely lost: 0 bytes in 0 blocks\n==26599==    indirectly lost: 0 bytes in 0 blocks\n==26599==      possibly lost: 0 bytes in 0 blocks\n==26599==    still reachable: 1,296 bytes in 13 blocks\n==26599==         suppressed: 0 bytes in 0 blocks\n==26599== Reachable blocks (those to which a pointer was found) are not shown.\n==26599== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==26599== \n==26599== For counts of detected and suppressed errors, rerun with: -v\n==26599== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3598.cpp:73)\n    by 0x401FC7: _main() (bs_test_3598.cpp:141)\n    by 0x4022BA: main (bs_test_3598.cpp:165)\n  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3599": {
            "status": 5,
            "run_result": {
                "output": "Unesite broj djece: Unesite imena djece: \nUnesite broj timova: ",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_8735/core.26617"
            },
            "debug_result": {
                "output": "[New LWP 26617]\nCore was generated by `bs_test_3599'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\nTo enable execution of this file add\n\tadd-auto-load-safe-path /opt/gcc-6.2.0/lib64/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path /\nline to your configuration file \"$HOME/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\n#1  0x0000000000401de1 in Razvrstavanje (imena=..., broj_timova=7) at bs_test_3599.cpp:73\n#2  0x0000000000401fc8 in _main () at bs_test_3599.cpp:141\n#3  0x00000000004022bb in main () at bs_test_3599.cpp:165",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "profile_result": {
                "output": "==26629== Memcheck, a memory error detector\n==26629== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26629== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==26629== Command: bs_test_3599\n==26629== Parent PID: 26628\n==26629== \n==26629== Invalid read of size 8\n==26629==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26629==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3599.cpp:73)\n==26629==    by 0x401FC7: _main() (bs_test_3599.cpp:141)\n==26629==    by 0x4022BA: main (bs_test_3599.cpp:165)\n==26629==  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n==26629== \n==26629== \n==26629== Process terminating with default action of signal 11 (SIGSEGV)\n==26629==  Access not within mapped region at address 0x8\n==26629==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26629==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3599.cpp:73)\n==26629==    by 0x401FC7: _main() (bs_test_3599.cpp:141)\n==26629==    by 0x4022BA: main (bs_test_3599.cpp:165)\n==26629==  If you believe this happened as a result of a stack\n==26629==  overflow in your program's main thread (unlikely but\n==26629==  possible), you can try to increase the size of the\n==26629==  main thread stack using the --main-stacksize= flag.\n==26629==  The main thread stack size used in this run was 10485760.\n==26629== \n==26629== HEAP SUMMARY:\n==26629==     in use at exit: 1,584 bytes in 17 blocks\n==26629==   total heap usage: 22 allocs, 5 frees, 74,768 bytes allocated\n==26629== \n==26629== LEAK SUMMARY:\n==26629==    definitely lost: 0 bytes in 0 blocks\n==26629==    indirectly lost: 0 bytes in 0 blocks\n==26629==      possibly lost: 0 bytes in 0 blocks\n==26629==    still reachable: 1,584 bytes in 17 blocks\n==26629==         suppressed: 0 bytes in 0 blocks\n==26629== Reachable blocks (those to which a pointer was found) are not shown.\n==26629== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==26629== \n==26629== For counts of detected and suppressed errors, rerun with: -v\n==26629== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3599.cpp:73)\n    by 0x401FC7: _main() (bs_test_3599.cpp:141)\n    by 0x4022BA: main (bs_test_3599.cpp:165)\n  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3600": {
            "status": 5,
            "run_result": {
                "output": "Unesite broj djece: Unesite imena djece: \nUnesite broj timova: ",
                "duration": 1,
                "status": 3,
                "core": "/tmp/buildservice/bs_8735/core.26647"
            },
            "debug_result": {
                "output": "[New LWP 26647]\nCore was generated by `bs_test_3600'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\nTo enable execution of this file add\n\tadd-auto-load-safe-path /opt/gcc-6.2.0/lib64/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path /\nline to your configuration file \"$HOME/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\n#1  0x0000000000401de1 in Razvrstavanje (imena=..., broj_timova=2) at bs_test_3600.cpp:73\n#2  0x0000000000401fc8 in _main () at bs_test_3600.cpp:141\n#3  0x00000000004022bb in main () at bs_test_3600.cpp:165",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "profile_result": {
                "output": "==26659== Memcheck, a memory error detector\n==26659== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26659== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==26659== Command: bs_test_3600\n==26659== Parent PID: 26658\n==26659== \n==26659== Invalid read of size 8\n==26659==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26659==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3600.cpp:73)\n==26659==    by 0x401FC7: _main() (bs_test_3600.cpp:141)\n==26659==    by 0x4022BA: main (bs_test_3600.cpp:165)\n==26659==  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n==26659== \n==26659== \n==26659== Process terminating with default action of signal 11 (SIGSEGV)\n==26659==  Access not within mapped region at address 0x8\n==26659==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26659==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3600.cpp:73)\n==26659==    by 0x401FC7: _main() (bs_test_3600.cpp:141)\n==26659==    by 0x4022BA: main (bs_test_3600.cpp:165)\n==26659==  If you believe this happened as a result of a stack\n==26659==  overflow in your program's main thread (unlikely but\n==26659==  possible), you can try to increase the size of the\n==26659==  main thread stack using the --main-stacksize= flag.\n==26659==  The main thread stack size used in this run was 10485760.\n==26659== \n==26659== HEAP SUMMARY:\n==26659==     in use at exit: 1,584 bytes in 17 blocks\n==26659==   total heap usage: 22 allocs, 5 frees, 74,768 bytes allocated\n==26659== \n==26659== LEAK SUMMARY:\n==26659==    definitely lost: 0 bytes in 0 blocks\n==26659==    indirectly lost: 0 bytes in 0 blocks\n==26659==      possibly lost: 0 bytes in 0 blocks\n==26659==    still reachable: 1,584 bytes in 17 blocks\n==26659==         suppressed: 0 bytes in 0 blocks\n==26659== Reachable blocks (those to which a pointer was found) are not shown.\n==26659== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==26659== \n==26659== For counts of detected and suppressed errors, rerun with: -v\n==26659== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3600.cpp:73)\n    by 0x401FC7: _main() (bs_test_3600.cpp:141)\n    by 0x4022BA: main (bs_test_3600.cpp:165)\n  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3601": {
            "status": 5,
            "run_result": {
                "output": "Unesite broj djece: Unesite imena djece: \nUnesite broj timova: ",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_8735/core.26677"
            },
            "debug_result": {
                "output": "[New LWP 26677]\nCore was generated by `bs_test_3601'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\nTo enable execution of this file add\n\tadd-auto-load-safe-path /opt/gcc-6.2.0/lib64/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path /\nline to your configuration file \"$HOME/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\n#1  0x0000000000401de1 in Razvrstavanje (imena=..., broj_timova=8) at bs_test_3601.cpp:73\n#2  0x0000000000401fc8 in _main () at bs_test_3601.cpp:141\n#3  0x00000000004022bb in main () at bs_test_3601.cpp:165",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "profile_result": {
                "output": "==26689== Memcheck, a memory error detector\n==26689== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26689== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==26689== Command: bs_test_3601\n==26689== Parent PID: 26688\n==26689== \n==26689== Invalid read of size 8\n==26689==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26689==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3601.cpp:73)\n==26689==    by 0x401FC7: _main() (bs_test_3601.cpp:141)\n==26689==    by 0x4022BA: main (bs_test_3601.cpp:165)\n==26689==  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n==26689== \n==26689== \n==26689== Process terminating with default action of signal 11 (SIGSEGV)\n==26689==  Access not within mapped region at address 0x8\n==26689==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26689==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3601.cpp:73)\n==26689==    by 0x401FC7: _main() (bs_test_3601.cpp:141)\n==26689==    by 0x4022BA: main (bs_test_3601.cpp:165)\n==26689==  If you believe this happened as a result of a stack\n==26689==  overflow in your program's main thread (unlikely but\n==26689==  possible), you can try to increase the size of the\n==26689==  main thread stack using the --main-stacksize= flag.\n==26689==  The main thread stack size used in this run was 10485760.\n==26689== \n==26689== HEAP SUMMARY:\n==26689==     in use at exit: 1,584 bytes in 17 blocks\n==26689==   total heap usage: 22 allocs, 5 frees, 74,768 bytes allocated\n==26689== \n==26689== LEAK SUMMARY:\n==26689==    definitely lost: 0 bytes in 0 blocks\n==26689==    indirectly lost: 0 bytes in 0 blocks\n==26689==      possibly lost: 0 bytes in 0 blocks\n==26689==    still reachable: 1,584 bytes in 17 blocks\n==26689==         suppressed: 0 bytes in 0 blocks\n==26689== Reachable blocks (those to which a pointer was found) are not shown.\n==26689== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==26689== \n==26689== For counts of detected and suppressed errors, rerun with: -v\n==26689== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3601.cpp:73)\n    by 0x401FC7: _main() (bs_test_3601.cpp:141)\n    by 0x4022BA: main (bs_test_3601.cpp:165)\n  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3602": {
            "status": 5,
            "run_result": {
                "output": "Unesite broj djece: Unesite imena djece: \nUnesite broj timova: ",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_8735/core.26707"
            },
            "debug_result": {
                "output": "[New LWP 26707]\nCore was generated by `bs_test_3602'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\nTo enable execution of this file add\n\tadd-auto-load-safe-path /opt/gcc-6.2.0/lib64/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path /\nline to your configuration file \"$HOME/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\n#1  0x0000000000401de1 in Razvrstavanje (imena=..., broj_timova=4) at bs_test_3602.cpp:73\n#2  0x0000000000401fc8 in _main () at bs_test_3602.cpp:141\n#3  0x00000000004022bb in main () at bs_test_3602.cpp:165",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "profile_result": {
                "output": "==26719== Memcheck, a memory error detector\n==26719== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26719== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==26719== Command: bs_test_3602\n==26719== Parent PID: 26718\n==26719== \n==26719== Invalid read of size 8\n==26719==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26719==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3602.cpp:73)\n==26719==    by 0x401FC7: _main() (bs_test_3602.cpp:141)\n==26719==    by 0x4022BA: main (bs_test_3602.cpp:165)\n==26719==  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n==26719== \n==26719== \n==26719== Process terminating with default action of signal 11 (SIGSEGV)\n==26719==  Access not within mapped region at address 0x8\n==26719==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26719==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3602.cpp:73)\n==26719==    by 0x401FC7: _main() (bs_test_3602.cpp:141)\n==26719==    by 0x4022BA: main (bs_test_3602.cpp:165)\n==26719==  If you believe this happened as a result of a stack\n==26719==  overflow in your program's main thread (unlikely but\n==26719==  possible), you can try to increase the size of the\n==26719==  main thread stack using the --main-stacksize= flag.\n==26719==  The main thread stack size used in this run was 10485760.\n==26719== \n==26719== HEAP SUMMARY:\n==26719==     in use at exit: 480 bytes in 7 blocks\n==26719==   total heap usage: 10 allocs, 3 frees, 73,280 bytes allocated\n==26719== \n==26719== LEAK SUMMARY:\n==26719==    definitely lost: 0 bytes in 0 blocks\n==26719==    indirectly lost: 0 bytes in 0 blocks\n==26719==      possibly lost: 0 bytes in 0 blocks\n==26719==    still reachable: 480 bytes in 7 blocks\n==26719==         suppressed: 0 bytes in 0 blocks\n==26719== Reachable blocks (those to which a pointer was found) are not shown.\n==26719== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==26719== \n==26719== For counts of detected and suppressed errors, rerun with: -v\n==26719== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3602.cpp:73)\n    by 0x401FC7: _main() (bs_test_3602.cpp:141)\n    by 0x4022BA: main (bs_test_3602.cpp:165)\n  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3603": {
            "status": 5,
            "run_result": {
                "output": "Unesite broj djece: Unesite imena djece: \nUnesite broj timova: ",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_8735/core.26737"
            },
            "debug_result": {
                "output": "[New LWP 26737]\nCore was generated by `bs_test_3603'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\nTo enable execution of this file add\n\tadd-auto-load-safe-path /opt/gcc-6.2.0/lib64/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path /\nline to your configuration file \"$HOME/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os=..., __str=...) at /home/etf-admin/gcc-6.2/objdir/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:5330\n#1  0x0000000000401de1 in Razvrstavanje (imena=..., broj_timova=9) at bs_test_3603.cpp:73\n#2  0x0000000000401fc8 in _main () at bs_test_3603.cpp:141\n#3  0x00000000004022bb in main () at bs_test_3603.cpp:165",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "profile_result": {
                "output": "==26749== Memcheck, a memory error detector\n==26749== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==26749== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==26749== Command: bs_test_3603\n==26749== Parent PID: 26748\n==26749== \n==26749== Invalid read of size 8\n==26749==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26749==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3603.cpp:73)\n==26749==    by 0x401FC7: _main() (bs_test_3603.cpp:141)\n==26749==    by 0x4022BA: main (bs_test_3603.cpp:165)\n==26749==  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n==26749== \n==26749== \n==26749== Process terminating with default action of signal 11 (SIGSEGV)\n==26749==  Access not within mapped region at address 0x8\n==26749==    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n==26749==    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3603.cpp:73)\n==26749==    by 0x401FC7: _main() (bs_test_3603.cpp:141)\n==26749==    by 0x4022BA: main (bs_test_3603.cpp:165)\n==26749==  If you believe this happened as a result of a stack\n==26749==  overflow in your program's main thread (unlikely but\n==26749==  possible), you can try to increase the size of the\n==26749==  main thread stack using the --main-stacksize= flag.\n==26749==  The main thread stack size used in this run was 10485760.\n==26749== \n==26749== HEAP SUMMARY:\n==26749==     in use at exit: 1,704 bytes in 21 blocks\n==26749==   total heap usage: 26 allocs, 5 frees, 74,888 bytes allocated\n==26749== \n==26749== LEAK SUMMARY:\n==26749==    definitely lost: 0 bytes in 0 blocks\n==26749==    indirectly lost: 0 bytes in 0 blocks\n==26749==      possibly lost: 0 bytes in 0 blocks\n==26749==    still reachable: 1,704 bytes in 21 blocks\n==26749==         suppressed: 0 bytes in 0 blocks\n==26749== Reachable blocks (those to which a pointer was found) are not shown.\n==26749== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==26749== \n==26749== For counts of detected and suppressed errors, rerun with: -v\n==26749== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x4CC6C90: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:5330)\n    by 0x401DE0: Razvrstavanje(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int) (bs_test_3603.cpp:73)\n    by 0x401FC7: _main() (bs_test_3603.cpp:141)\n    by 0x4022BA: main (bs_test_3603.cpp:165)\n  Address 0x8 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 67
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "3612": {
            "status": 6,
            "run_result": {
                "output": "Unesite broj djece: Unesite imena djece: \nUnesite broj timova: Razvrstavanje nemoguce\n",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        }
    },
    "queue_items": 0,
    "time": 1558538640
}